var searchIndex={};
searchIndex["lmake_lines_of_code"] = {"doc":"lmake_lines_of_code","i":[[3,"LinesOfCode","lmake_lines_of_code","Struct that contains 4 types of lines count: code, doc…",null,null],[12,"src_code_lines","","lines with code in srs files",0,null],[12,"src_doc_comment_lines","","lines with doc_comments in srs files",0,null],[12,"src_comment_lines","","lines with comments in srs files",0,null],[12,"tests_lines","","unit plus integration tests",0,null],[12,"examples_lines","","all lines in examples files",0,null],[3,"AppObject","","An object to implement methods rather than functions. The…",null,null],[3,"MockTraitCountLines","","Traits and methods must be used for the mocking library.",null,null],[12,"TraitCountLines_expectations","","",1,null],[3,"MockTraitCountLines_TraitCountLines","","",null,null],[12,"workspace_or_project_count_lines","","",2,null],[12,"process_git_remote","","",2,null],[5,"include_into_readme_md","","Includes (writes, modifies) the shield badge code into…",null,[[["str"]]]],[5,"traverse_dir_with_exclude_dir","","Traverse dir and its sub-dir, but avoid excluded dirs. The…",null,[[["str"],["path"]],[["result",["vec"]],["vec",["string"]]]]],[0,"count_lines_mod","","Module with fn to count rust lines.",null,null],[3,"CargoToml","lmake_lines_of_code::count_lines_mod","",null,null],[12,"workspace","","",3,null],[3,"Workspace","","",null,null],[12,"members","","",4,null],[3,"LinesOfCode","","Struct that contains 4 types of lines count: code, doc…",null,null],[12,"src_code_lines","","lines with code in srs files",0,null],[12,"src_doc_comment_lines","","lines with doc_comments in srs files",0,null],[12,"src_comment_lines","","lines with comments in srs files",0,null],[12,"tests_lines","","unit plus integration tests",0,null],[12,"examples_lines","","all lines in examples files",0,null],[11,"one_project_count_lines","lmake_lines_of_code","private function. Use public…",5,[[["path"]],["linesofcode"]]],[11,"intern_process_git_remote","","the internal fn returns a Result. in the case of error the…",5,[[["self"]],[["string"],["result",["string"]]]]],[11,"to_string_as_md_table","","Returns a string with the code for a markdown table with…",5,[[["self"],["linesofcode"]],["string"]]],[11,"to_string_as_shield_badges","","Returns a string with the markdown code for 4 shield badges.",5,[[["str"],["self"],["linesofcode"]],["string"]]],[11,"new","","",0,[[["usize"]],["linesofcode"]]],[0,"readme_include_mod","","Includes (writes, modifies) the shield badge code into…",null,null],[5,"include_into_readme_md","lmake_lines_of_code::readme_include_mod","Includes (writes, modifies) the shield badge code into…",null,[[["str"]]]],[0,"utilsmod","lmake_lines_of_code","Often used common utility fn.",null,null],[5,"traverse_dir_with_exclude_dir","lmake_lines_of_code::utilsmod","Traverse dir and its sub-dir, but avoid excluded dirs. The…",null,[[["str"],["path"]],[["result",["vec"]],["vec",["string"]]]]],[8,"TraitCountLines","lmake_lines_of_code","Traits and methods must be used for the mocking library.",null,null],[10,"workspace_or_project_count_lines","","",6,[[["self"]],["linesofcode"]]],[10,"process_git_remote","","",6,[[["self"]],["string"]]],[11,"new","","Constructor of the object that has all the public methods.…",5,[[],["appobject"]]],[11,"main","","Runs all the public methods. It is called by the CLI main…",5,[[["str"],["self"]],["string"]]],[11,"text_to_include","","",5,[[["str"],["self"]],["string"]]],[11,"checkpoint","","Validate that all current expectations for all methods…",2,[[["self"]]]],[11,"checkpoint","","Immediately validate all expectations and clear them.",1,[[["self"]]]],[11,"new","","Create a new mock object with no expectations.",1,[[],["self"]]],[11,"expect_workspace_or_project_count_lines","","Create an `Expectation` for mocking the `ident` method",1,[[["self"]],["expectation"]]],[11,"expect_process_git_remote","","Create an `Expectation` for mocking the `ident` method",1,[[["self"]],["expectation"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"into","","",5,[[],["u"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"try_into","","",5,[[],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"type_id","","",5,[[["self"]],["typeid"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[],["u"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[],["u"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"try_into","","",2,[[],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"type_id","","",2,[[["self"]],["typeid"]]],[11,"from","lmake_lines_of_code::count_lines_mod","",3,[[["t"]],["t"]]],[11,"into","","",3,[[],["u"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"try_into","","",3,[[],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"type_id","","",3,[[["self"]],["typeid"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[],["u"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"try_into","","",4,[[],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"type_id","","",4,[[["self"]],["typeid"]]],[11,"workspace_or_project_count_lines","lmake_lines_of_code","Returns the struct LinesOfCode for 4 types of lines: code,…",5,[[["self"]],["linesofcode"]]],[11,"process_git_remote","","Return the string for link for badges like:…",5,[[["self"]],["string"]]],[11,"workspace_or_project_count_lines","","",1,[[["self"]],["linesofcode"]]],[11,"process_git_remote","","",1,[[["self"]],["string"]]],[11,"default","","",0,[[],["linesofcode"]]],[11,"default","","",1,[[],["self"]]],[11,"default","","",2,[[],["self"]]],[11,"fmt","","",0,[[["formatter"],["self"]],["result"]]],[11,"deserialize","lmake_lines_of_code::count_lines_mod","",3,[[["__d"]],["result"]]],[11,"deserialize","","",4,[[["__d"]],["result"]]]],"p":[[3,"LinesOfCode"],[3,"MockTraitCountLines"],[3,"MockTraitCountLines_TraitCountLines"],[3,"CargoToml"],[3,"Workspace"],[3,"AppObject"],[8,"TraitCountLines"]]};
addSearchOptions(searchIndex);initSearch(searchIndex);