var searchIndex = JSON.parse('{\
"lmake_lines_of_code":{"doc":"lmake_lines_of_code","i":[[3,"LinesOfCode","lmake_lines_of_code","Struct that contains 4 types of lines count: code, doc…",null,null],[12,"src_code_lines","","lines with code in srs files",0,null],[12,"src_doc_comment_lines","","lines with doc_comments in srs files",0,null],[12,"src_comment_lines","","lines with comments in srs files",0,null],[12,"tests_lines","","unit plus integration tests",0,null],[12,"examples_lines","","all lines in examples files",0,null],[3,"AppObject","","An object to implement methods rather than functions. The…",null,null],[3,"MockTraitCountLines","","Traits and methods must be used for the mocking library.",null,null],[12,"TraitCountLines_expectations","","",1,null],[3,"MockTraitCountLines_TraitCountLines","","",null,null],[12,"workspace_or_project_count_lines","","",2,null],[12,"process_git_remote","","",2,null],[5,"include_into_readme_md","","Includes (writes, modifies) the shield badge code into…",null,[[]]],[5,"traverse_dir_with_exclude_dir","","Traverse dir and its sub-dir, but avoid excluded dirs. The…",null,[[["path",3]],[["vec",3],["result",6]]]],[0,"count_lines_mod","","Module with fn to count rust lines.",null,null],[3,"CargoToml","lmake_lines_of_code::count_lines_mod","",null,null],[12,"workspace","","",3,null],[3,"Workspace","","",null,null],[12,"members","","",4,null],[3,"LinesOfCode","","Struct that contains 4 types of lines count: code, doc…",null,null],[12,"src_code_lines","","lines with code in srs files",0,null],[12,"src_doc_comment_lines","","lines with doc_comments in srs files",0,null],[12,"src_comment_lines","","lines with comments in srs files",0,null],[12,"tests_lines","","unit plus integration tests",0,null],[12,"examples_lines","","all lines in examples files",0,null],[11,"one_project_count_lines","lmake_lines_of_code","private function. Use public…",5,[[["path",3]],["linesofcode",3]]],[11,"git_remote_output","","",5,[[],[["result",6],["string",3]]]],[11,"regex_capture","","returns a Result. in the case of error the calling fn will…",5,[[["string",3]],[["result",6],["string",3]]]],[11,"to_string_as_md_table","","Returns a string with the code for a markdown table with…",5,[[["linesofcode",3]],["string",3]]],[11,"to_string_as_shield_badges","","Returns a string with the markdown code for 4 shield badges.",5,[[["linesofcode",3]],["string",3]]],[11,"new","","",0,[[],["linesofcode",3]]],[0,"readme_include_mod","","Includes (writes, modifies) the shield badge code into…",null,null],[5,"include_into_readme_md","lmake_lines_of_code::readme_include_mod","Includes (writes, modifies) the shield badge code into…",null,[[]]],[0,"utilsmod","lmake_lines_of_code","Often used common utility fn.",null,null],[5,"traverse_dir_with_exclude_dir","lmake_lines_of_code::utilsmod","Traverse dir and its sub-dir, but avoid excluded dirs. The…",null,[[["path",3]],[["vec",3],["result",6]]]],[8,"TraitCountLines","lmake_lines_of_code","Traits and methods must be used for the mocking library.",null,null],[10,"workspace_or_project_count_lines","","",6,[[],["linesofcode",3]]],[10,"process_git_remote","","",6,[[],["string",3]]],[11,"new","","Constructor of the object that has all the public methods.…",5,[[],["appobject",3]]],[11,"main","","Runs all the public methods. It is called by the CLI main…",5,[[],["string",3]]],[11,"text_to_include","","",5,[[],["string",3]]],[11,"checkpoint","","Validate that all current expectations for all methods…",2,[[]]],[11,"checkpoint","","Immediately validate all expectations and clear them.",1,[[]]],[11,"new","","Create a new mock object with no expectations.",1,[[]]],[11,"expect_workspace_or_project_count_lines","","Create an `Expectation` for mocking the `ident` method",1,[[],["expectation",3]]],[11,"expect_process_git_remote","","Create an `Expectation` for mocking the `ident` method",1,[[],["expectation",3]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"from","lmake_lines_of_code::count_lines_mod","",3,[[]]],[11,"into","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"workspace_or_project_count_lines","lmake_lines_of_code","Returns the struct LinesOfCode for 4 types of lines: code,…",5,[[],["linesofcode",3]]],[11,"process_git_remote","","Return the string for link for badges like:…",5,[[],["string",3]]],[11,"workspace_or_project_count_lines","","",1,[[],["linesofcode",3]]],[11,"process_git_remote","","",1,[[],["string",3]]],[11,"default","","",0,[[],["linesofcode",3]]],[11,"default","","",1,[[]]],[11,"default","","",2,[[]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"deserialize","lmake_lines_of_code::count_lines_mod","",3,[[],["result",4]]],[11,"deserialize","","",4,[[],["result",4]]]],"p":[[3,"LinesOfCode"],[3,"MockTraitCountLines"],[3,"MockTraitCountLines_TraitCountLines"],[3,"CargoToml"],[3,"Workspace"],[3,"AppObject"],[8,"TraitCountLines"]]}\
}');
addSearchOptions(searchIndex);initSearch(searchIndex);